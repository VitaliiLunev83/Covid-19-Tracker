{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Maps","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","border","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","id","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","key","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5eb158f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './infoBox.css'\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({title,cases,total,active,isRed,...props}) {\r\n    return (\r\n        <Card className={`InfoBox ${active && \"InfoBox--selected\"} ${isRed && active && \"InfoBox--red\" }`} onClick={props.onClick}>\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" className=\"infoBox__title\">\r\n                {title}\r\n                </Typography>\r\n                <h2 className={`\"infoBox__cases\" ${!isRed && \"infobox__cases--green\"}`}>{cases}</h2>\r\n                <Typography color=\"textSecondary\" className=\"infoBox__total\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import {Circle,Popup} from \"react-leaflet\"\r\nimport React from 'react'\r\nimport numeral from \"numeral\"\r\n\r\nconst casesTypeColors ={\r\n    cases:{\r\n        hex:\"#CC1034\",\r\n      \r\n    \r\n        multiplier: 800,\r\n    },\r\n    recovered:{\r\n        hex:\"#7dd71d\",\r\n        \r\n       \r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex:\"#fb4443\",\r\n      \r\n        \r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\n\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1)\r\n\r\n\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}`: \"+0\";\r\n\r\n// Draw circles on the map\r\nexport const showDataOnMap = (data,casesType = 'cases') => \r\n    data.map(country =>(\r\n        <Circle\r\n        center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius = {\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n        >\r\n        <Popup>\r\n           <div className=\"info-container\">\r\n               <div className=\"info-flag\"\r\n                   style = {{backgroundImage: `url(${country.countryInfo.flag})`}}\r\n               />\r\n               <div className=\"info-name\">{country.country}</div>\r\n               <div  className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0.0\")}</div>\r\n               <div  className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0.0\")}</div>\r\n               <div  className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0.0\")}</div>\r\n           </div>\r\n        </Popup>\r\n\r\n        </Circle>\r\n\r\n    ))\r\n\r\n","import React from 'react';\r\nimport './Map.css'\r\nimport { Map as LeafletMap, Marker, Popup, TileLayer } from 'react-leaflet';\r\nimport { showDataOnMap } from './util';\r\n\r\n\r\nconst position = [51.505, -0.09]\r\nfunction Maps({countries, casesType,center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                \r\n                    <TileLayer\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                    />\r\n                    \r\n              {showDataOnMap(countries,casesType)}\r\n\r\n            </LeafletMap>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Maps;\r\n","import React from 'react';\r\nimport  './Table.css';\r\nimport numeral from \"numeral\"\r\n\r\nexport default function Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n          {countries.map(({country,cases})=>(\r\n              <tr>\r\n                  <td>{country}</td>\r\n                  <td><strong>{numeral(cases).format()}</strong></td>\r\n              </tr>\r\n          ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend:{\r\n        display: false,\r\n    },\r\n    elements:{\r\n        point:{\r\n            radius: 0,\r\n        }\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips:{\r\n        mode:'index',\r\n        intersect: false,\r\n        callbacks:{\r\n            label: function (tooltipItem,data) {\r\n                return numeral(tooltipItem.value).format('+0,0');\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[{\r\n            type: \"time\",\r\n            time:{\r\n                format:\"MM/DD/YY\",\r\n                tooltipFormat:\"ll\",\r\n            }\r\n        }],\r\n        yAxes:[{\r\n            gridLines:{\r\n                display:false,\r\n\r\n            },\r\n            ticks:{\r\n                callback: function(value,index,values){\r\n                    return numeral(value).format('0a');\r\n                },\r\n            },\r\n        }],\r\n    }\r\n}\r\n\r\nfunction LineGraph({casesType}) {\r\n\r\n    const [data,setData] = useState({});\r\n\r\n    const buildChartData = (data, casesType = 'cases') => {\r\n        const chartData = [];\r\n        let  lastDataPoint;\r\n\r\n        for(let date in data.cases){\r\n            if(lastDataPoint){\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n    }\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    let chartData = buildChartData(data, 'cases');\r\n                    setData(chartData);\r\n                })\r\n\r\n        }\r\n        fetchData();\r\n        \r\n    },[casesType])\r\n\r\n \r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                data: data,\r\n                                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                                border: 'cc1034'\r\n\r\n                            }\r\n                        ],\r\n                    }}\r\n\r\n                />\r\n\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { FormControl, MenuItem, Select,Card,CardContent, } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Maps from './Map';\nimport Table from './Table.js';\nimport {sortData, prettyPrintStat} from './util.js';\nimport LineGraph from './LineGraph';\n\n\n\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 59.57, lng: 30.19});\n  const [mapZoom, setMapZoom] = useState(4);\n  const [mapCountries,setMapCountries] = useState([]);\n  const [casesType,setCasesType] = useState(\"cases\");\n   \n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response=>response.json())\n    .then(data =>{setCountryInfo(data)})\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n            id: country.countryInfo.id\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        })\n    }\n\n    getCountriesData();\n\n  }, []);\n  \n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    \n    const url = \n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n\n      })\n    \n  }\n \n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid19-Tracker</h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (<MenuItem value={country.value} key={country.id}>{country.name}</MenuItem>))}\n\n            </Select>\n\n\n          </FormControl>\n\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox \n            isRed\n            onClick={e=>setCasesType(\"cases\")}\n            active={casesType === \"cases\"}\n            \n           \n           title=\"Coronovirus\" total={prettyPrintStat(countryInfo.cases)} cases={prettyPrintStat(countryInfo.todayCases)}\n            />\n          <InfoBox \n          \n          onClick={e=>setCasesType(\"recovered\")}\n          active={casesType === \"recovered\"}\n          title=\"Recovered\" total={prettyPrintStat(countryInfo.recovered)} cases={prettyPrintStat(countryInfo.todayRecovered)} />\n          <InfoBox \n          isRed \n          onClick={e=>setCasesType(\"deaths\")}\n          active={casesType === \"deaths\"}\n          title=\"Deaths\" total={prettyPrintStat(countryInfo.deaths)} cases={prettyPrintStat(countryInfo.todayDeaths)} />\n        </div>\n        <div className=\"app__map\">\n          <Maps center={mapCenter}\n                zoom={mapZoom}\n                countries={mapCountries}\n                casesType={casesType}\n                 />\n        </div>\n\n\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n      \n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}